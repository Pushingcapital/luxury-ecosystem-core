version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: luxury_automotive_db
    environment:
      POSTGRES_DB: luxury_automotive_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - luxury_automotive_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: luxury_automotive_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - luxury_automotive_network

  # Node.js Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: luxury_automotive_api
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: luxury_automotive_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      DB_MAX_CONNECTIONS: 20
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure_redis_password}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_change_in_production}
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Stripe Configuration
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # HubSpot Integration
      HUBSPOT_API_KEY: ${HUBSPOT_API_KEY}
      HUBSPOT_PORTAL_ID: ${HUBSPOT_PORTAL_ID}
      
      # Make.com Integration
      MAKE_WEBHOOK_URL: ${MAKE_WEBHOOK_URL}
      MAKE_API_KEY: ${MAKE_API_KEY}
      
      # Slack Integration
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      SLACK_CHANNEL_NOTIFICATIONS: ${SLACK_CHANNEL_NOTIFICATIONS:-#notifications}
      SLACK_CHANNEL_ALERTS: ${SLACK_CHANNEL_ALERTS:-#alerts}
      
      # JotForm Integration
      JOTFORM_API_KEY: ${JOTFORM_API_KEY}
      JOTFORM_BASE_URL: https://api.jotform.com
      
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      
      # AI/ML Configuration
      TENSORFLOW_BACKEND: cpu
      AI_MODEL_PATH: ./models
      VEHICLE_ANALYSIS_MODEL: vehicle_condition_v1.0
      CREDIT_SCORING_MODEL: credit_score_v2.1
      
      # Revenue Optimization
      REVENUE_OPTIMIZATION_ENABLED: true
      DYNAMIC_PRICING_ENABLED: true
      CASCADE_TRIGGER_THRESHOLD: 0.75
      
      # Security Configuration
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX_REQUESTS: 100
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # Logging Configuration
      LOG_LEVEL: info
      LOG_FILE: ./logs/app.log
      LOG_MAX_SIZE: 10m
      LOG_MAX_FILES: 5
      
      # Performance Monitoring
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      HEALTH_CHECK_INTERVAL: 30000
      
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./models:/app/models
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - luxury_automotive_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx Load Balancer (for production scaling)
  nginx:
    image: nginx:alpine
    container_name: luxury_automotive_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - luxury_automotive_network
    profiles:
      - production

  # Prometheus Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: luxury_automotive_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - luxury_automotive_network
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: luxury_automotive_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - luxury_automotive_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  luxury_automotive_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16